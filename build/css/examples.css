/* line 1, ../src/scss/includes/_resets.scss */
html,
body,
ul,
ol {
  margin: 0;
  padding: 0; }

/* line 6, ../src/scss/examples.scss */
body {
  font: 3rem Helvetica, arial;
  background-color: #aaa; }

/* line 12, ../src/scss/examples.scss */
nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

/* line 18, ../src/scss/examples.scss */
nav li {
  display: inline-block; }

/* line 20, ../src/scss/examples.scss */
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

/* line 27, ../src/scss/examples.scss */
.box {
  -webkit-transform: rotate(35deg);
  transform: rotate(35deg); }

/* %message-shared is a placeholder class 
*  for been extended in real classes. */
/* line 31, ../src/scss/examples.scss */
.message, .success {
  border: 1px solid #ccc;
  padding: 5rem;
  color: #333; }

/* line 41, ../src/scss/examples.scss */
.success {
  border-color: green; }

/* line 46, ../src/scss/examples.scss */
a {
  font-weight: 700;
  text-decoration: none; }
  /* line 49, ../src/scss/examples.scss */
  a:hover {
    text-decoration: underline; }
  /* line 50, ../src/scss/examples.scss */
  body.firefox a {
    font-weight: 500; }

/* Making a compound selector with & (referencing parent selector) */
/* line 54, ../src/scss/examples.scss */
#main {
  color: black; }
  /* line 56, ../src/scss/examples.scss */
  #main-sidebar {
    border: 1px solid; }

/* Nested Properties */
/* line 60, ../src/scss/examples.scss */
.funky {
  font-family: Helvetica;
  font-size: 30em;
  font-weight: 400; }

/* line 9, ../src/scss/includes/_mixins.scss */
body.firefox .headelem:before {
  content: "Hi, Firefox users!"; }

/* line 72, ../src/scss/examples.scss */
#variable-defaults {
  content: "First content"; }
  /* line 74, ../src/scss/examples.scss */
  #variable-defaults::before {
    content: "First time reference"; }

/* line 80, ../src/scss/examples.scss */
section.info {
  padding-top: 20rem;
  padding-bottom: 15rem; }
  /* line 2, ../src/scss/components/_card.scss */
  section.info .cardInfoComponent {
    border: 1px solid green;
    text-shadow: 0 0 12px #000000; }
    /* line 6, ../src/scss/components/_card.scss */
    section.info .cardInfoComponent .head {
      font-size: 3rem; }
    /* line 10, ../src/scss/components/_card.scss */
    section.info .cardInfoComponent .content {
      font-size: 2rem; }
      /* line 13, ../src/scss/components/_card.scss */
      section.info .cardInfoComponent .content a {
        display: block;
        background-color: aqua;
        color: #fff; }
        /* line 18, ../src/scss/components/_card.scss */
        section.info .cardInfoComponent .content a:hover {
          background-color: aquamarine; }

/* line 90, ../src/scss/examples.scss */
.box-of-items .item-1 {
  width: 2em; }

/* line 90, ../src/scss/examples.scss */
.box-of-items .item-2 {
  width: 4em; }

/* line 90, ../src/scss/examples.scss */
.box-of-items .item-3 {
  width: 6em; }

/* line 97, ../src/scss/examples.scss */
.facebook-icon {
  background-image: url("/image/icon/facebook.png"); }

/* line 97, ../src/scss/examples.scss */
.linkedin-icon {
  background-image: url("/image/icon/linkedin.png"); }

/* line 97, ../src/scss/examples.scss */
.youtube-icon {
  background-image: url("/image/icon/youtube.png"); }

/* line 97, ../src/scss/examples.scss */
.instagram-icon {
  background-image: url("/image/icon/instagram.png"); }

/* line 105, ../src/scss/examples.scss */
.puma-icon {
  background-image: url("/images/puma.png");
  border: 2px solid black;
  cursor: default; }

/* line 105, ../src/scss/examples.scss */
.sea-slug-icon {
  background-image: url("/images/sea-slug.png");
  border: 2px solid blue;
  cursor: pointer; }

/* line 105, ../src/scss/examples.scss */
.egret-icon {
  background-image: url("/images/egret.png");
  border: 2px solid white;
  cursor: move; }

/* line 117, ../src/scss/examples.scss */
.list-of-items .item-6 {
  width: 12em; }

/* line 117, ../src/scss/examples.scss */
.list-of-items .item-4 {
  width: 8em; }

/* line 117, ../src/scss/examples.scss */
.list-of-items .item-2 {
  width: 4em; }

/* line 124, ../src/scss/examples.scss */
.variable-arguments .shadows {
  box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; }

/* line 130, ../src/scss/examples.scss */
.variable-arguments .primary {
  color: #ff0000;
  background-color: #00ff00;
  border-color: #0000ff; }

/* line 135, ../src/scss/examples.scss */
.variable-arguments .secondary {
  color: #00ff00;
  background-color: #0000ff;
  border-color: #ff0000; }

/* line 143, ../src/scss/examples.scss */
.colors {
  background-color: blue;
  color: white;
  border-color: blue; }

/* line 150, ../src/scss/examples.scss */
#sidebar {
  width: 240px; }

/* The Block, Element, Modifier methodology (commonly referred to as BEM) 
* is a popular naming convention for classes in HTML and CSS.
* Another smart part of BEM is that everything is a class and nothing is nested.
* Here are some basic principles example... */
/* Block component */
/* line 159, ../src/scss/examples.scss */
.btn {
  background-color: #00ff00; }
  /* line 162, ../src/scss/examples.scss */
  .btn__price {
    /* Element that depends upon the block */
    background-color: #333;
    color: #fff;
    padding-right: 12px;
    padding-left: 12px;
    margin-right: -10px;
    /* realign button text padding */
    opacity: .4;
    border-radius: 5px 0 0 5px; }
    /* line 172, ../src/scss/examples.scss */
    .btn__price--red {
      /* Modifier */
      color: #ff0000; }
  /* line 178, ../src/scss/examples.scss */
  .btn--big {
    /* Modifier */
    font-size: 28px;
    padding: 10px;
    font-weight: 400; }
  /* line 186, ../src/scss/examples.scss */
  .btn--orange {
    /* Modifier that changes the style of the block */
    border-color: #FF4136;
    color: white;
    background-color: #FF4136; }
  /* line 193, ../src/scss/examples.scss */
  .btn--green {
    /* Modifier */
    border-color: #3D9970;
    color: white;
    background-color: #3D9970; }

@media only screen and (min-width: 1024px) {
  /* line 2, ../src/scss/responsive/_main-media-queries.scss */
  body {
    font-size: 4rem; } }

@media only screen and (min-width: 1366px) {
  /* line 8, ../src/scss/responsive/_main-media-queries.scss */
  body {
    font-size: 4rem; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
